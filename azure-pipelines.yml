trigger:
  branches:
    include:
    - master

resources:
- repo: self

variables:
  - group: acrDetails
  - name: dockerRegistryServiceConnection
    value: 'webGoatACR'
  - name: imageRepository
    value: 'webgoat-8.0'
  - name: dockerfilePath
    value: 'webgoat-server/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  - name: resourceGroup
    value: 'CI-CD-Paid'
  - name: acrRegistry
    value: 'appsecacr.azurecr.io'
  - name: subscriptionConnection
    value: 'webGoatARM'
  - name: containerGroup
    value: 'containergroup'
  - name: containerDNS
    value: 'webgoatcontainer'

# build steps to build and push WebGoat container to ACR
stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: Maven@1
      displayName: Maven
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        mavenVersionOption: 'Default'

    - task: Docker@2
      displayName: Build and push an WebGoat image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
# deploying to development stage
- stage: DeployToDev
  displayName: Deploy to Dev stage
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/'))
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: 'ubuntu-latest'

    environment: 'WebGoat-Dev'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureCLI@1
              displayName: Deploy to WebGoat container Dev ACI
              inputs:
                azureSubscription: $(subscriptionConnection)
                scriptLocation: 'inlineScript'
                inlineScript: 'az container create --resource-group $(resourceGroup) --name $(containerGroup) --image $(acrRegistry)/$(imageRepository):$(tag) --dns-name-label $(containerDNS) --ports 8080 --registry-username $(acrUsername) --registry-password $(acrPassword)'

# Verification test
- stage: verificationtest
  displayName: Azure Secure DevOps
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
  - job: verificationtest
    displayName: Verification Test
    pool:
      vmImage: 'ubuntu-latest'
  
    steps:
    - task: AzSKSVTs@4
      displayName: verification test
      inputs:
        ConnectedServiceNameARM: 'webGoatARM'
        GenerateMethodParameterSetSelection: 'ResourceGroupName'
        ResourceGroupName: 'CI-CD-Paid'
        SubscriptionId: '2c71b264-34bf-4900-aef4-7421daeeab14'
        EnableGSSscan: true
        AggregateControlsStatus: true

