trigger:
  branches:
    include:
    - master

resources:
- repo: self



# CycloneDX POC - depricated
#  - group: dependency
#  - name: CycloneDX Python Generate SBOM
#    value: CycloneDX/gh-python-generate-sbom@v1.0.0
variables:
  - group: acrDetails
  - name: dockerRegistryServiceConnection
    value: <ACR_CONNECTION_NAME>
  - name: imageRepository
    value: 'webgoat-8.0'
  - name: dockerfilePath
    value: 'webgoat-server/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  - name: resourceGroup
    value: <RESOURCE_GROUP_NAME>
  - name: acrRegistry
    value: <ACR_ADDRESS>
  - name: subscriptionConnection
    value: <SUBCRIPTION_CONNECTION_NAME>
  - name: containerGroup
    value: <CONTAINER GROUP>
  - name: containerDNS
    value: <CONTAINER DNS LABEL>
  - group: 42Crunch
  - group: Armorcode 


# build steps to build and push WebGoat container to ACR
stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    
# Sonarqube Variables 
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'WebgoatArmorCode'
        scannerMode: 'Other'
        extraProperties: |
          sonar.language=java
          sonar.exclusions=**/*.ts
          analysis.mode=preview
          issuesReport.html.enable=true
          report.export.path=sonar-report.json

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: true
        sqMavenPluginVersionChoice: 'latest'

    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'

#    - task: Maven@1
#      displayName: Maven
#      inputs:
#        mavenPomFile: 'pom.xml'
#        mavenOptions: '-Xmx3072m'
#        javaHomeOption: 'JDKVersion'
#        jdkVersionOption: '1.11'
#        jdkArchitectureOption: 'x64'
#        publishJUnitResults: true
#        testResultsFiles: '**/TEST-*.xml'
#        mavenVersionOption: 'Default'

#skipping upload for now until we get access to the container registry 
    #- task: Docker@2
    #  displayName: Build and push an WebGoat image to container registry
    #  inputs:
    #    command: buildAndPush
    #    repository: $(imageRepository)
    #    dockerfile: $(dockerfilePath)
    #    containerRegistry: $(dockerRegistryServiceConnection)
    #    tags: |
    #      $(tag)
    #      latest

# OWASP Dependency Checker
    - task: dependency-check-build-task@6
      inputs:
        projectName: 'Webgoat'
        scanPath: '**/*.jar'
        format: ALL

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '/home/vsts/work/1/TestResults/dependency-check/dependency-check-junit.xml'
        testRunTitle: '$(Build.BuildId)'
#42 crunch API integration 
#    - task: APIContractSecurityAudit@2
#      inputs:
#        apiToken: '$(42C_API_TOKEN)'
        #logLevel: 
        #minScore: 
        #platformUrl: 
        #shareEveryone: 

# Amorcode Dependency Check results upload 
    - task: PythonScript@0
      inputs:
        scriptSource: 'filePath'
        scriptPath: 'armorcode_import_dependency_check.py'

#Armorcode Sonarqube upload hasbeen depricated by the Sonar community
#bringing the policy checkk up
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          i=0
                        while [ $i -lt 30 ]
                        do
                            curl --location --request POST 'https://app.armorcode.com/client/buildvalidation' --header 'Content-Type: application/json' --header 'Authorization: Bearer 2eea3807-07c2-4d93-8bd1-ca4385a76cde'  -d '{ "env": "Production", "product": "768", "subProduct": "1852", "buildTool":"AZURE_PIPELINE", "buildNumber": "$(Build.BuildId)"}' > result.json
                            status=$(jq -r '.status' result.json)
                            if [ $status = "HOLD" ]
                            then
                                sleep 10
                                i=$(( $i + 1 ))
                                if [ $i = 30 ]
                                then
                                    exit 1
                                else
                                    continue
                                fi
                            else
                                break
                            fi
                        done

# deploying to development stage - Skipping until we confrim Azure resourcing 
#- stage: DeployToDev
#  displayName: Deploy to Dev stage
#  dependsOn: ArmorcodeCheck
#  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/'))
#  jobs:
#  - deployment: Deploy
#    displayName: Deploy job
#    pool:
#      vmImage: 'ubuntu-latest'

#    environment: 'WebGoat-Dev'
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#            - task: AzureCLI@1
#              displayName: Deploy to WebGoat container Dev ACI
#              inputs:
#                azureSubscription: $(subscriptionConnection)
#                scriptLocation: 'inlineScript'
#                inlineScript: 'az container create --resource-group $(resourceGroup) --name $(containerGroup) --image $(acrRegistry)/$(imageRepository):$(tag) --dns-name-label $(containerDNS) --ports 8080 --registry-username $(acrUsername) --registry-password $(acrPassword)'



